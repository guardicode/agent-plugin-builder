import logging
from pprint import pformat  # noqa: F401
from typing import Any, Dict

from agentpluginapi import (
    ExploiterResult,
    IAgentBinaryRepository,
    IAgentCommandBuilderFactory,
    IAgentEventPublisher,
    IHTTPAgentBinaryServerRegistrar,
    IPropagationCredentialsRepository,
    ITCPPortSelector,
    LocalMachineInfo,
    TargetHost,
)
from monkeytypes import AgentID, Event

from .mock_options import MockOptions

logger = logging.getLogger(__name__)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str = "",
        agent_id: AgentID,
        agent_binary_repository: IAgentBinaryRepository,
        agent_event_publisher: IAgentEventPublisher,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        tcp_port_selector: ITCPPortSelector,
        http_agent_binary_server_registrar: IHTTPAgentBinaryServerRegistrar,
        local_machine_info: LocalMachineInfo,
        agent_command_builder_factory: IAgentCommandBuilderFactory,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_id = agent_id
        self._agent_binary_repository = agent_binary_repository
        self._agent_event_publisher = agent_event_publisher
        self._propagation_credentials_repository = propagation_credentials_repository
        self._tcp_port_selector = tcp_port_selector
        self._http_agent_binary_server_registrar = http_agent_binary_server_registrar
        self._local_machine_info = local_machine_info
        self._agent_command_builder_factory = agent_command_builder_factory

    def run(
        self,
        *,
        host: TargetHost,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResult:
        try:
            logger.debug("Parsing options: {pformat(options)}")
            mock_options = MockOptions(**options)  # noqa: F841
        except Exception as err:
            msg = f"Error parsing options: {err}"
            logger.error(msg)
            return ExploiterResult(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

        return ExploiterResult(exploitation_success=True, propagation_success=True)
